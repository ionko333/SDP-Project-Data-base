int getRecordsCnt()
{
	ifstream iFile;
	if (!iFile.good())
	{
		return -1;
	}
	iFile.open("Planes.db", ios::binary);
	iFile.seekg(0, ios::end);
	int cnt = iFile.tellg() / sizeof(Record);
	iFile.close();
	return cnt;
}
int recordPosition(unsigned long long int Id)
{
	int recordsCnt = getRecordsCnt();
	ifstream iFile;
	iFile.open("Planes.db", ios::binary);
	int i = 0;
	Record rec;
	for (int i = 0; i < recordsCnt; ++i)
	{
		iFile.read((char*)&rec, sizeof(Record));
		if (Id == rec.Id)
		{
			return i;
		}
	}
	iFile.close();
	return -1;
}

void createRecord(unsigned long long int Id, int& cntRecords)
{
	ofstream oFile;
	oFile.open("Planes.db", ios::app | ios::binary);
	if (!oFile.good())
	{
		cerr << "File could not be opened\n";
		return;
	}
	cout << "Please type the Plane\n";
	char Plane[257];
	cin.getline(Plane, 256);
	//cout << "plane name read: \"" << Plane << "\"" << endl;
	//cin.ignore();
	cout << "Please type the type \n";
	char Type[257];
	cin.getline(Type, 256);
	//cout << "plane type read: \"" << Type << "\"" << endl;
	//cin.ignore();
	cout << "Please type the number of flights\n";
	unsigned long long int Flights;
	cin >> Flights;
	cin.ignore();
	//cout << "number of flights read: " << Flights << endl;
	Record record(Id, Plane, Type, Flights);
	oFile.write((const char*)&record, sizeof(Record));
	oFile.close();
	++cntRecords;
}

void DeleteRecord(unsigned long long int Id, int& cntRecords, int position)
{
	cout << "position is: " << position << endl;
	cout << "number of objects to be read: " << cntRecords << endl;
	Record * records = new Record[cntRecords];
	ifstream iFile;
	iFile.open("Planes.db", ios::binary);
	if (!iFile.good())
	{
		cerr << "File could not be opened\n";
		delete[] records;
		return;
	}
	for (int i = 0; i < cntRecords; i++)
	{
		iFile.read((char*)&records[i], sizeof(Record));
		cout << "Reading: " << records[i].Id << " " << records[i].Plane << " " << records[i].Type << " " << records[i].Flights << endl;
	}
	iFile.close();
	ofstream oFile;
	oFile.open("Planes.db", ios::binary);
	if (!oFile.good())
	{
		cerr << "File could not be opened\n";
		delete[] records;
		return;
	}
	for (int i = 0; i < position; ++i)
	{
		oFile.write((char*)&records[i], sizeof(Record));
		cout << "Writing: " << records[i].Id << " " << records[i].Plane << " " << records[i].Type << " " << records[i].Flights << endl;
	}
	for (int i = position + 1; i < cntRecords; ++i)
	{
		oFile.write((char*)&records[i], sizeof(Record));
		cout << "Writing: " << records[i].Id << " " << records[i].Plane << " " << records[i].Type << " " << records[i].Flights << endl;
	}
	oFile.close();
	delete[] records;
	cout << "Record deleted successfully!\n";
	--cntRecords;
}

void show()
{
	ifstream iFile;
	iFile.open("Planes.db", ios::binary);
	if (!iFile)
	{
		cerr << "File cannot be opened\n";
		return;
	}
	Record rec;
	int numOfRecords = getRecordsCnt();
	for (int i = 0; i < numOfRecords; i++)
	{
		iFile.read((char*)&rec, sizeof(Record));
		cout << rec.Id << " " << rec.Plane << " " << rec.Type << " " << rec.Flights << endl;
	}
}
